/*
    Copyright 2014 - Giacomo Pinardi

    This file is part of GoldenCows.com Profit Calculator.

    GoldenCows.com Profit Calculator is free software: you can redistribute 
    it and/or modify it under the terms of the GNU General Public License as 
    published by the Free Software Foundation, either version 3 of the License,
    or (at your option) any later version.

    GoldenCows.com Profit Calculator is distributed in the hope that 
    it will be useful, but WITHOUT ANY WARRANTY; without even the 
    implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with GoldenCows.com Profit Calculator. If not, see <http://www.gnu.org/licenses/>.

    Based On a Game of: 2014 LOFTBOX, LLC. ALL RIGHTS RESERVED В® - golden-cows.com
 */

package golden.cows.comprofitcalculator;

import java.awt.Desktop;
import java.io.File; 
import jxl.*; 
import jxl.write.*;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author Giacomo
 */
public class GraphicInterface extends javax.swing.JFrame {

    private URI urlGC = null;
    private URI urlGCPC = null;
    private AboutInterface AI = new AboutInterface();
    
    private float investingGold;
    private float _inizInvestingGold;
    private float withdrawalGold;
    private float _inizWithdrawalGold;
    
    private int greenCows;
    private int _inizGreenCows;
    private final int priceGreenCows = 100;
    private int yellowCows;
    private int _inizYellowCows;
    private final int priceYellowCows = 1000;
    private int brownCows;
    private int _inizBrownCows;
    private final int priceBrownCows = 5000;
    private int blueCows;
    private int _inizBlueCows;
    private final int priceBlueCows = 25000;
    private int redCows;
    private int _inizRedCows;
    private final int priceRedCows = 100000;
    // private int goldCows;
    // private int _inizGoldCows;
    // private final int priceGoldCows = ????;
    
    private float goldToExchange;
    
    private float maxAmountToExchange;
    
    private int intervalOfHoursAutoExchange;
    
    private float mBtcInvested;
    
    private int dailyBonusSelected;
    private float dailyGamblingBonus;
    
    private int shoppingFrequency;
    
    private int greenCowsToBuy;
    private String _inizGreenCowsToBuy;
    private int yellowCowsToBuy;
    private String _inizYellowCowsToBuy;
    private int brownCowsToBuy;
    private String _inizBrownCowsToBuy;
    private int blueCowsToBuy;
    private String _inizBlueCowsToBuy;
    private int redCowsToBuy;
    private String _inizRedCowsToBuy;
    // private int goldCowsToBuy;
    // private String _inizGoldCowsToBuy
    
    private int outputTimeInterval;
    
    private int amountOfIntervals;
    
    private float totalInvestingGold;
    private float totalWithdrawalGold;
               
    public GraphicInterface() {
        initComponents();
        this.setTitle("golden-cows.com Profit Calculator");
                        
        try {
            urlGC = new URI("https://golden-cows.com/en/i=3803"); 
            urlGCPC = new URI("www.gcpc.altervista.org/support.html");
        }
        catch (URISyntaxException UE) {
            JOptionPane.showMessageDialog(rootPane, "Wrong syntax of the URL","Error!" , JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jTextField19 = new javax.swing.JTextField();
        jTextField20 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel40 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jTextField24 = new javax.swing.JTextField();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel48 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel49 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabel26 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jCheckBox6 = new javax.swing.JCheckBox();
        jLabel28 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField12 = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jTextField16 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jTextField17 = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jTextField18 = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jTextField22 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox();
        jTextField23 = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel52 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setBackground(new java.awt.Color(223, 242, 230));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(200, 143, 52));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/GClogo.png"))); // NOI18N
        jButton1.setText("Profit Calculator");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(223, 242, 230));

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel1.setText("Insert the number of your own cows:");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/yellow.png"))); // NOI18N
        jLabel3.setText("Yellow Cows:");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/green.png"))); // NOI18N
        jLabel2.setText("Green Cows:");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/brown.png"))); // NOI18N
        jLabel6.setText("Brown Cows:");

        jTextField1.setText("0");

        jTextField2.setText("0");

        jTextField3.setText("0");

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/blue.png"))); // NOI18N
        jLabel5.setText("Blue Cows:");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/red.png"))); // NOI18N
        jLabel4.setText("Red Cows:");

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/gold.png"))); // NOI18N
        jLabel7.setText("Gold Cows:");

        jTextField4.setText("0");

        jTextField5.setText("0");

        jTextField6.setEditable(false);

        jLabel37.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel37.setText("Insert the amount of Gold in your wallets:");

        jLabel38.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel38.setText("Investing Gold:");

        jLabel39.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel39.setText("Withdrawal Gold:");

        jTextField19.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTextField19.setText("0");

        jTextField20.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTextField20.setText("0");

        jLabel14.setFont(new java.awt.Font("Vrinda", 0, 10)); // NOI18N
        jLabel14.setText("Images and game of propiety of: 2014 LOFTBOX, LLC. ALL RIGHTS RESERVED B® - golden-cows.com");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel38)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField19))
                            .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(33, 33, 33)
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(26, 26, 26)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel14))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel37)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(jLabel39)
                    .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14))
        );

        jTabbedPane1.addTab("Warehouse", jPanel1);

        jPanel2.setBackground(new java.awt.Color(223, 242, 230));

        jLabel8.setText("<html> You can exchange the gold for withdrawal to the gold for invest and get +20% to investing account.<html>");

        jLabel9.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel9.setText("Insert the amount of withdrawal gold you want exchange:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel10.setText("Amount of Withdrawal Gold [min. 1000]:");

        jTextField7.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTextField7.setText("0");

        jLabel11.setText("You can set an auto exchange every time you want, min. every hour.");

        jLabel12.setText("If the gold is in withdrawal balance it will be exchanged.");

        jLabel13.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel13.setText("Enable auto exchange and select an interval:");

        jCheckBox1.setBackground(new java.awt.Color(223, 242, 230));
        jCheckBox1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jCheckBox1.setText("Enable auto exchange");

        jLabel40.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel40.setText("Max Amount of Gold to Exchange every AE[min. 1000]:");

        jTextField21.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTextField21.setText("0");

        jLabel46.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel46.setText("Auto Exchange Interval:");

        jTextField24.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTextField24.setText("0");

        jComboBox3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hours", "Days", "Months" }));
        jComboBox3.setSelectedIndex(1);

        jLabel48.setFont(new java.awt.Font("Vrinda", 0, 10)); // NOI18N
        jLabel48.setText("Images and game of propiety of: 2014 LOFTBOX, LLC. ALL RIGHTS RESERVED B® - golden-cows.com");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel10)
                        .addGap(41, 41, 41)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel11))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel46)
                        .addGap(36, 36, 36)
                        .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel48)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jLabel48))
        );

        jTabbedPane1.addTab("Exchanger", jPanel2);

        jPanel3.setBackground(new java.awt.Color(223, 242, 230));

        jLabel15.setText("Conversion rates of the game: 1 mBTC = 0.001 BTC = 2000 Gold.");

        jLabel16.setText("In this game you can invest Bitcoin to receive Gold.");

        jLabel17.setText("The minimum amount you can invest is 0.5 mBTC = 0.0005 BTC.");

        jLabel18.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel18.setText("Insert the amount of Bitcoin you want to invest:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel19.setText("Enter the amount [mBTC]:");

        jTextField9.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTextField9.setText("0");

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel20.setText("You will receive [Gold]:");

        jTextField10.setEditable(false);
        jTextField10.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jButton2.setText("Calculate");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel21.setText("First investment? You will  earn +30% bonus:");

        jCheckBox2.setBackground(new java.awt.Color(223, 242, 230));
        jCheckBox2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jCheckBox2.setText("First investment");

        jLabel49.setFont(new java.awt.Font("Vrinda", 0, 10)); // NOI18N
        jLabel49.setText("Images and game of propiety of: 2014 LOFTBOX, LLC. ALL RIGHTS RESERVED B® - golden-cows.com");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField9, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jTextField10))
                        .addGap(35, 35, 35)
                        .addComponent(jButton2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel21))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jCheckBox2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel49)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jButton2)))
                .addGap(21, 21, 21)
                .addComponent(jLabel21)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addComponent(jLabel49))
        );

        jTabbedPane1.addTab("Investments", jPanel3);

        jPanel4.setBackground(new java.awt.Color(223, 242, 230));

        jLabel22.setText("<html>Here you can set the prevision of your Daily Bonus and what you will earn (or lose) in games.<html>");

        jLabel23.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel23.setText("Select the model to calculate the Daily Bouns:");

        jCheckBox3.setBackground(new java.awt.Color(223, 242, 230));
        jCheckBox3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jCheckBox3.setText("Enable Daily Bonus Calculation");

        jRadioButton5.setBackground(new java.awt.Color(223, 242, 230));
        jRadioButton5.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jRadioButton5.setText("Random value every day [10-100 Gold]");

        jRadioButton6.setBackground(new java.awt.Color(223, 242, 230));
        jRadioButton6.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jRadioButton6.setText("Fixed value every day [55 Gold]");

        jLabel24.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel24.setText("(similar to the website)");

        jLabel25.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel25.setText("(this is a middle value)");

        jCheckBox4.setBackground(new java.awt.Color(223, 242, 230));
        jCheckBox4.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jCheckBox4.setText("Enable Daily Gambling and Refer Calculation");

        jLabel26.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel26.setText("If you want insert a value for the summary of your gambling and refer earnings:");

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel27.setText("Daily max earned/lost value from gambling and refer(+/-):");

        jLabel50.setFont(new java.awt.Font("Vrinda", 0, 10)); // NOI18N
        jLabel50.setText("Images and game of propiety of: 2014 LOFTBOX, LLC. ALL RIGHTS RESERVED B® - golden-cows.com");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jCheckBox3))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton6)
                            .addComponent(jRadioButton5)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24)
                                    .addComponent(jLabel25)))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel27)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jCheckBox4))
                            .addComponent(jLabel26)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel50)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel25)
                .addGap(18, 18, 18)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox4)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jLabel50))
        );

        jTabbedPane1.addTab("Bonus", jPanel4);

        jPanel5.setBackground(new java.awt.Color(223, 242, 230));

        jCheckBox6.setBackground(new java.awt.Color(223, 242, 230));
        jCheckBox6.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jCheckBox6.setText("Enable Shopping Plan");

        jLabel28.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel28.setText("Enable shopping plan and insert the shopping frequency:");

        jComboBox1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hours", "Days" }));

        jTextField12.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTextField12.setText("10");

        jLabel29.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel29.setText("Insert the number of cows of your shopping plan ('*', max 1, means buy it as soon as possible):");

        jLabel30.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/green.png"))); // NOI18N
        jLabel30.setText("Green Cows:");

        jTextField13.setText("0");

        jLabel31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/yellow.png"))); // NOI18N
        jLabel31.setText("Yellow Cows:");

        jTextField14.setText("0");

        jLabel32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/brown.png"))); // NOI18N
        jLabel32.setText("Brown Cows:");

        jTextField15.setText("0");

        jLabel33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/blue.png"))); // NOI18N
        jLabel33.setText("Blue Cows:");

        jTextField16.setText("0");

        jLabel34.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/red.png"))); // NOI18N
        jLabel34.setText("Red Cows:");

        jTextField17.setText("0");

        jLabel35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/gold.png"))); // NOI18N
        jLabel35.setText("Gold Cows:");

        jTextField18.setEditable(false);

        jLabel44.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel44.setText("Shopping Frequency:");

        jLabel53.setFont(new java.awt.Font("Vrinda", 0, 10)); // NOI18N
        jLabel53.setText("Images and game of propiety of: 2014 LOFTBOX, LLC. ALL RIGHTS RESERVED B® - golden-cows.com");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jLabel32)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                        .addComponent(jLabel31)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                        .addComponent(jLabel30)
                                        .addGap(26, 26, 26)
                                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(58, 58, 58)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel33)
                                    .addComponent(jLabel34)
                                    .addComponent(jLabel35))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel29))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jCheckBox6)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(jLabel44)
                                    .addGap(34, 34, 34)
                                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(145, 145, 145)))
                    .addComponent(jLabel28)
                    .addComponent(jLabel53))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel28)
                .addGap(13, 13, 13)
                .addComponent(jCheckBox6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33)
                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34)
                    .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jLabel53))
        );

        jTabbedPane1.addTab("Shopping Plan", jPanel5);

        jPanel6.setBackground(new java.awt.Color(223, 242, 230));

        jLabel36.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel36.setText("Select the output time interval:");

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setText("Run GCPC!");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel41.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel41.setText("Launch Profit Calculator (please be patient):");

        jLabel42.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel42.setText("Select the amount of intervals to calculate:");

        jTextField22.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTextField22.setText("7");

        jComboBox2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hours", "Days", "Months" }));
        jComboBox2.setSelectedIndex(1);

        jTextField23.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTextField23.setText("4");

        jLabel43.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel43.setText("Amount of Intervals:");

        jLabel45.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel45.setText("Output Time Interval:");

        jLabel47.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel47.setText("Click to Show the File Sheet Produced:");

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton4.setText("Show File Sheet");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel52.setFont(new java.awt.Font("Vrinda", 0, 10)); // NOI18N
        jLabel52.setText("Images and game of propiety of: 2014 LOFTBOX, LLC. ALL RIGHTS RESERVED B® - golden-cows.com");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel42)
                            .addComponent(jLabel36)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel45)
                                .addGap(36, 36, 36)
                                .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel43)
                        .addGap(30, 30, 30)
                        .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel41)
                            .addComponent(jLabel47))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jButton3)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel52)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addGap(12, 12, 12)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel45))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel42)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel43)
                            .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jLabel41))
                        .addGap(37, 37, 37)
                        .addComponent(jLabel47)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                .addComponent(jLabel52))
        );

        jTabbedPane1.addTab("PROFIT", jPanel6);

        jButton5.setBackground(new java.awt.Color(234, 186, 50));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton5.setText("Need Help? Click Here!");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jMenu2.setText("About");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addGap(9, 9, 9)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.openURL(urlGC);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        AI.show();
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.setUpWarehouseTab();
        this.setUpExchangerTab();
        this.setUpInvestmentsTab();
        this.setUpBonusTab();
        this.setUpShoppingPlanTab();
        this.setUpProfitTab();        
        this.calculateProfit();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            float mBtc = Float.parseFloat(jTextField9.getText());
            if ((mBtc >= 0.5) || (mBtc == 0)) {
                float gold = 2000 * mBtc;
                if (jCheckBox2.isSelected()) {
                    gold = gold + ((gold/100)*30);
                }
                gold = this.convertFloatToRightPrecisionFloat(gold);
                String s = String.valueOf(gold);
                jTextField10.setText(s);
            }
            else {
                jTextField10.setText("Error: < 0.5 mBTC");
            }            
        }
        catch (NumberFormatException NFE) {
            jTextField10.setText("Error!");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (Desktop.isDesktopSupported()) {
            File file = new File("Output.xls");
            try {
                Desktop.getDesktop().open(file);
            }
            catch (IOException e) {
                JOptionPane.showMessageDialog(rootPane, "Input/Output error.","Error!" , JOptionPane.ERROR_MESSAGE);
            }
        } 
        else {
            JOptionPane.showMessageDialog(rootPane, "Desktop not supported. You need to have desktop supported.","Error!" , JOptionPane.ERROR_MESSAGE);
        }
        
        
    

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       this.openURL(urlGCPC);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void openURL (URI url) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(url);
            } 
            catch (IOException e) {
                JOptionPane.showMessageDialog(rootPane, "Input/Output error.","Error!" , JOptionPane.ERROR_MESSAGE);
            }
        } 
        else {
            JOptionPane.showMessageDialog(rootPane, "Desktop not supported. You need to have desktop supported.","Error!" , JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void setUpWarehouseTab () {
        try {
            this.investingGold = Float.parseFloat(jTextField19.getText());  
            this.investingGold = this.convertFloatToRightPrecisionFloat(this.investingGold);
            this._inizInvestingGold = this.investingGold;
        }
        catch (NumberFormatException NFE) {
            JOptionPane.showMessageDialog(rootPane, "Error: 'Warehouse' Tab > 'Investing Gold'.\n'" + jTextField19.getText() + "' can't be processed.\nPlease insert a number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            this.withdrawalGold = Float.parseFloat(jTextField20.getText());
            this.withdrawalGold = this.convertFloatToRightPrecisionFloat(this.withdrawalGold);
            this._inizWithdrawalGold = this.withdrawalGold;
        }
        catch (NumberFormatException NFE) {
            JOptionPane.showMessageDialog(rootPane, "Error: 'Warehouse' Tab > 'Withdrawal Gold'.\n'" + jTextField20.getText() + "' can't be processed.\nPlease insert a number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            this.greenCows = Integer.parseInt(jTextField1.getText());
            this._inizGreenCows = this.greenCows;
        }
        catch (NumberFormatException NFE) {
            JOptionPane.showMessageDialog(rootPane, "Error: 'Warehouse' Tab > 'Green Cows'.\n'" + jTextField1.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            this.yellowCows = Integer.parseInt(jTextField2.getText());
            this._inizYellowCows = this.yellowCows;
        }
        catch (NumberFormatException NFE) {
            JOptionPane.showMessageDialog(rootPane, "Error: 'Warehouse' Tab > 'Yellow Cows'.\n'" + jTextField2.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            this.brownCows = Integer.parseInt(jTextField3.getText());
            this._inizBrownCows = this.brownCows;
        }
        catch (NumberFormatException NFE) {
            JOptionPane.showMessageDialog(rootPane, "Error: 'Warehouse' Tab > 'Brown Cows'.\n'" + jTextField3.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            this.blueCows = Integer.parseInt(jTextField4.getText());
            this._inizBlueCows = this.blueCows;
        }
        catch (NumberFormatException NFE) {
            JOptionPane.showMessageDialog(rootPane, "Error: 'Warehouse' Tab > 'Blue Cows'.\n'" + jTextField4.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            this.redCows = Integer.parseInt(jTextField5.getText());
            this._inizRedCows = this.redCows;
        }
        catch (NumberFormatException NFE) {
            JOptionPane.showMessageDialog(rootPane, "Error: 'Warehouse' Tab > 'Red Cows'.\n'" + jTextField5.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        
        /*
        try {
            this.goldCows = Integer.parseInt(jTextField6.getText());
            this._inizGoldCows = this.goldCows;
        }
        catch (NumberFormatException NFE) {
            JOptionPane.showMessageDialog(rootPane, "Error: 'Warehouse' Tab > 'Gold Cows'.\n'" + jTextField6.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        */        
    }
    
    private void setUpExchangerTab () {
        try {
            float f = Float.parseFloat(jTextField7.getText());
            this.goldToExchange = f;
            
            if ((this.goldToExchange < 1000) && (this.goldToExchange != 0)) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Exchanger' Tab > 'Amount of Withdrawal Gold'.\n'" + jTextField7.getText() + "' is too small amount.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
            else if (this.withdrawalGold < this.goldToExchange) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Warehouse' Tab > 'Withdrawal Gold'.\nNot enough Gold.", "Error!", JOptionPane.ERROR_MESSAGE);
            }            
        }
        catch (NumberFormatException NFE) {            
            JOptionPane.showMessageDialog(rootPane, "Error: 'Exchanger' Tab > 'Amount of Withdrawal Gold'.\n'" + jTextField7.getText() + "' can't be processed.\nPlease insert a number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        
        if (jCheckBox1.isSelected()) {
            try {
                float f = Float.parseFloat(jTextField21.getText());
                if (f >= 1000) {
                    this.maxAmountToExchange = f;
                    this.maxAmountToExchange = this.convertFloatToRightPrecisionFloat(this.maxAmountToExchange);
                }
                else {
                    JOptionPane.showMessageDialog(rootPane, "Error: 'Exchanger' Tab > 'Max Amount of Gold to Exchange'.\n'" + jTextField21.getText() + "' is too small amount.", "Error!", JOptionPane.ERROR_MESSAGE);
                }                
            }
            catch (NumberFormatException NFE) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Exchanger' Tab > 'Max Amount of Gold to Exchange'.\n'" + jTextField21.getText() + "' can't be processed.\nPlease insert a number.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
            try {
                int i = Integer.parseInt(jTextField24.getText());
                if (jComboBox3.getSelectedIndex() == 0) {
                    this.intervalOfHoursAutoExchange = i;
                }
                else if (jComboBox3.getSelectedIndex() == 1) {
                    this.intervalOfHoursAutoExchange = i * 24;
                }
                else {
                    this.intervalOfHoursAutoExchange = i * 24 * 30;
                }
            }
            catch (NumberFormatException NFE) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Exchanger' Tab > 'Auto Exchange Interval'.\n'" + jTextField24.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
            }            
        }
    }
    
    private void setUpInvestmentsTab () {
        try {
            float mBtc = Float.parseFloat(jTextField9.getText());
            this.mBtcInvested = mBtc;
            if ((this.mBtcInvested < 0.5) && (this.mBtcInvested != 0)) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Investments' Tab > 'Enter the amount [mBTC]'.\n'" + jTextField9.getText() + "' is too small amount.", "Error!", JOptionPane.ERROR_MESSAGE);
            }            
        }
        catch (NumberFormatException NFE) {
            JOptionPane.showMessageDialog(rootPane, "Error: 'Investments' Tab > 'Enter the amount [mBTC]'.\n'" + jTextField9.getText() + "' can't be processed.\nPlease insert a number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }        
    }
    
    private void setUpBonusTab () {
        if (jCheckBox3.isSelected()) {
            if (jRadioButton5.isSelected()) {
                this.dailyBonusSelected = -1;
            }
            else if (jRadioButton6.isSelected()) {
                this.dailyBonusSelected = 55;
            }
            else {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Bonus' Tab > 'Daily Bonus Calculation'.\nNothing is selected.\nPlease select something or disable Daily Bonus Calculation.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (jCheckBox4.isSelected()) {
            try {
                float f = Float.parseFloat(jTextField11.getText());
                this.dailyGamblingBonus = f;
                this.dailyGamblingBonus = this.convertFloatToRightPrecisionFloat(this.dailyGamblingBonus);
            }
            catch (NumberFormatException NFE) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Bonus' Tab > 'Daily max earned/lost value from gambling and refer:'.\n'" + jTextField11.getText() + "' can't be processed.\nPlease insert a number.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void setUpShoppingPlanTab() {
        if (jCheckBox6.isSelected()) {
            try {
                int i = Integer.parseInt(jTextField12.getText());
                if (jComboBox1.getSelectedIndex() == 0) {
                    this.shoppingFrequency = i;
                }
                else {
                    this.shoppingFrequency = i * 24;
                }
            }
            catch (NumberFormatException NFE) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Shopping Plan' Tab > 'Shopping Frequency'.\n'" + jTextField12.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
            
            int nStar = 0;
            
            try {
                String s = jTextField13.getText();
                this._inizGreenCowsToBuy = s;
                if (s.equals("*")) {
                    this.greenCowsToBuy = -1;
                    nStar ++;
                }
                else {
                    this.greenCowsToBuy = Integer.parseInt(s);
                }
            }
            catch (NumberFormatException NFE) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Shopping Plan' Tab > 'Green Cows'.\n'" + jTextField13.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
            }

            try {
                String s = jTextField14.getText();
                this._inizYellowCowsToBuy = s;
                if (s.equals("*")) {
                    this.yellowCowsToBuy = -1;
                    nStar ++;
                }
                else {
                    this.yellowCowsToBuy = Integer.parseInt(s);
                }
            }
            catch (NumberFormatException NFE) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Shopping Plan' Tab > 'Yellow Cows'.\n'" + jTextField14.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
            }

            try {
                String s = jTextField15.getText();
                this._inizBrownCowsToBuy = s;
                if (s.equals("*")) {
                    this.brownCowsToBuy = -1;
                    nStar ++;
                }
                else {
                    this.brownCowsToBuy = Integer.parseInt(s);
                }
            }
            catch (NumberFormatException NFE) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Shopping Plan' Tab > 'Brown Cows'.\n'" + jTextField15.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
            }

            try {
                String s = jTextField16.getText();
                this._inizBlueCowsToBuy = s;
                if (s.equals("*")) {
                    this.blueCowsToBuy = -1;
                    nStar ++;
                }
                else {
                    this.blueCowsToBuy = Integer.parseInt(s);
                }
            }
            catch (NumberFormatException NFE) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Shopping Plan' Tab > 'Blue Cows'.\n'" + jTextField16.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
            }

            try {
                String s = jTextField17.getText();
                this._inizRedCowsToBuy = s;
                if (s.equals("*")) {
                    this.redCowsToBuy = -1;
                    nStar ++;
                }
                else {
                    this.redCowsToBuy = Integer.parseInt(s);
                }
            }
            catch (NumberFormatException NFE) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Shopping Plan' Tab > 'Red Cows'.\n'" + jTextField17.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
            }

            /*
            try {
                String s = jTextField18.getText();
                this._InizGoldCowsToBuy = s;
                if (s.equals("*")) {
                    this.goldCowsToBuy = -1;
                    nStar ++;
                }
                else {
                    this.goldCowsToBuy = Integer.parseInt(s);
                }
            }
            catch (NumberFormatException NFE) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Shopping Plan' Tab > 'Gold Cows'.\n'" + jTextField18.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
            */
            
            if (nStar > 1) {
                JOptionPane.showMessageDialog(rootPane, "Error: 'Shopping Plan'.\nPlease insert max 1 star ('*').", "Error!", JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }
    
    private void setUpProfitTab () {
        try {
            int i = Integer.parseInt(jTextField22.getText());
            if (jComboBox2.getSelectedIndex() == 0) {
                this.outputTimeInterval = i;
            }
            else if (jComboBox2.getSelectedIndex() == 1) {
                this.outputTimeInterval = i * 24;
            }
            else {
                this.outputTimeInterval = i *24 * 30;
            }
        }
        catch (NumberFormatException NFE) {
            JOptionPane.showMessageDialog(rootPane, "Error: 'PROFIT' Tab > 'Output Time Interval'.\n'" + jTextField22.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            this.amountOfIntervals = Integer.parseInt(jTextField23.getText());
        }
        catch (NumberFormatException NFE) {
            JOptionPane.showMessageDialog(rootPane, "Error: 'PROFIT' Tab > 'Amount of Intervals:'.\n'" + jTextField23.getText() + "' can't be processed.\nPlease insert an integer number.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void calculateProfit () {
        
        Random random = new Random();
        
        this.withdrawalGold = this.withdrawalGold - this.goldToExchange;
        this.investingGold = this.investingGold + this.goldToExchange + ((this.goldToExchange / 100) * 20);
        
        float goldInvest = 2000 * this.mBtcInvested;
        this.investingGold = this.investingGold + goldInvest;
        if (jCheckBox2.isSelected()) {
            this.investingGold = this.investingGold + ((goldInvest / 100) * 30);
        }
        
        this.investingGold = this.convertFloatToRightPrecisionFloat(this.investingGold);
        
        Label r[][] = new Label[8][this.amountOfIntervals];
        
        float vInvestingGold[] = new float[this.amountOfIntervals];
        float vWithdrawalGold[] = new float[this.amountOfIntervals];
        int vGreenCows[] = new int[this.amountOfIntervals];
        int vYellowCows[] = new int[this.amountOfIntervals];
        int vBrownCows[] = new int[this.amountOfIntervals];
        int vBlueCows[] = new int[this.amountOfIntervals];
        int vRedCows[] = new int[this.amountOfIntervals];
        
        float vIntervalGoldProduced[] = new float[this.amountOfIntervals];
        
        int rowIndex = 0;
        
        for (int i = 1; i <= this.outputTimeInterval * this.amountOfIntervals; i++) {
            
            float goldCows = 0;
            
            goldCows = (float) (goldCows + (this.greenCows * 0.07));
            goldCows = (float) (goldCows + (this.yellowCows * 0.7));
            goldCows = (float) (goldCows + (this.brownCows * 3.7));
            goldCows = (float) (goldCows + (this.blueCows * 19.2));
            goldCows = (float) (goldCows + (this.redCows * 96.5));
            //gold = (float) (gold + (this.goldCows * ???));
            
            this.investingGold = this.investingGold + (goldCows / 100) * 70;
            this.investingGold = this.convertFloatToRightPrecisionFloat(this.investingGold);
            
            this.totalInvestingGold = this.totalInvestingGold + (goldCows / 100) * 70;
            this.totalInvestingGold = this.convertFloatToRightPrecisionFloat(this.totalInvestingGold);
            
            this.withdrawalGold = this.withdrawalGold + (goldCows / 100) * 30;
            this.withdrawalGold = this.convertFloatToRightPrecisionFloat(this.withdrawalGold);
            
            this.totalWithdrawalGold = this.totalWithdrawalGold + (goldCows / 100) * 30;
            this.totalWithdrawalGold = this.convertFloatToRightPrecisionFloat(this.totalWithdrawalGold);
            
            if ((jCheckBox1.isSelected()) && (this.intervalOfHoursAutoExchange != 0)) {
                if (i%this.intervalOfHoursAutoExchange == 0) {
                    if (this.withdrawalGold >= 1000) {                        
                        if (this.maxAmountToExchange >= this.withdrawalGold) {
                            this.investingGold = this.investingGold + this.withdrawalGold + ((this.withdrawalGold / 100) * 20);
                            this.withdrawalGold = 0;
                        }
                        else {
                            this.investingGold = this.investingGold + this.maxAmountToExchange + ((this.maxAmountToExchange / 100) * 20);
                            this.withdrawalGold = this.withdrawalGold - this.maxAmountToExchange;
                        }
                        this.investingGold = this.convertFloatToRightPrecisionFloat(this.investingGold);
                    }
                }
            }
            
            if (i%24 == 0) {
                if (jCheckBox3.isSelected()) {
                    if (this.dailyBonusSelected == 55) {
                        this.investingGold = this.investingGold + 55;
                    }
                    else {
                        this.investingGold = this.investingGold + (random.nextInt(91) + 10);
                    }
                }
                if (jCheckBox4.isSelected()) {
                    this.investingGold = this.investingGold + this.dailyGamblingBonus;
                }
            }
            
            if (jCheckBox6.isSelected()) {
                if (i%this.shoppingFrequency == 0) {
                    // NO Gold Cows Setted:
                    if (this.redCowsToBuy == -1) {
                        while (this.investingGold >= this.priceRedCows) {
                            this.investingGold = this.investingGold - this.priceRedCows;
                            this.redCows ++;
                        }
                    }
                    else if (this.blueCowsToBuy == -1) {
                        while (this.investingGold >= this.priceBlueCows) {
                            this.investingGold = this.investingGold - this.priceBlueCows;
                            this.blueCows ++;
                        }
                    }
                    else if (this.brownCowsToBuy == -1) {
                        while (this.investingGold >= this.priceBrownCows) {
                            this.investingGold = this.investingGold - this.priceBrownCows;
                            this.brownCows ++;
                        }
                    }
                    else if (this.yellowCowsToBuy == -1) {
                        while (this.investingGold >= this.priceYellowCows) {
                            this.investingGold = this.investingGold - this.priceYellowCows;
                            this.yellowCows ++;
                        }
                    }
                    else if (this.greenCowsToBuy == -1) {
                        while (this.investingGold >= this.priceGreenCows) {
                            this.investingGold = this.investingGold - this.priceGreenCows;
                            this.greenCows ++;
                        }
                    }
                    else {
                        while ((this.redCowsToBuy > 0) && (this.investingGold >= this.priceRedCows)) {
                            this.investingGold = this.investingGold - this.priceRedCows;
                            this.redCows ++;
                            this.redCowsToBuy --;
                        }
                        while ((this.blueCowsToBuy > 0) && (this.investingGold >= this.priceBlueCows)) {
                            this.investingGold = this.investingGold - this.priceBlueCows;
                            this.blueCows ++;
                            this.blueCowsToBuy --;
                        }
                        while ((this.brownCowsToBuy > 0) && (this.investingGold >= this.priceBrownCows)) {
                            this.investingGold = this.investingGold - this.priceBrownCows;
                            this.brownCows ++;
                            this.brownCowsToBuy --;
                        }
                        while ((this.yellowCowsToBuy > 0) && (this.investingGold >= this.priceYellowCows)) {
                            this.investingGold = this.investingGold - this.priceYellowCows;
                            this.yellowCows ++;
                            this.yellowCowsToBuy --;
                        }
                        while ((this.greenCowsToBuy > 0) && (this.investingGold >= this.priceGreenCows)) {
                            this.investingGold = this.investingGold - this.priceGreenCows;
                            this.greenCows ++;
                            this.greenCowsToBuy --;
                        }
                    }
                }
            }
            
            try {
                WritableWorkbook workbook = Workbook.createWorkbook(new File("Output.xls"));
                WritableSheet sheet = workbook.createSheet("GCPC Sheet", 0);
                
                Label l = new Label(0, 1, "Sheet producted with GoldenCows.com Profit Calculator - All Right Reserved");
                sheet.addCell(l);
                
                Label lx = new Label(8, 1,"Website: www.gcpc.altervista.org" );
                sheet.addCell(lx);
                
                Label ly = new Label(8, 2, "Version: 1.0.2");
                sheet.addCell(ly);
                
                Label lz = new Label(0, 2, "Please Donate BTC: 16RbEYiKPAd2Lf1fNgEmTqeuewcwWo3YjU");
                sheet.addCell(lz);
                //
                Label s = new Label(0, 4, "Application Settings:");
                sheet.addCell(s);
                
                Label sc = new Label(3, 4, "Inital Cows:");
                sheet.addCell(sc);
                
                Label sc1 = new Label(5, 4, "Gr: " + String.valueOf(this._inizGreenCows));
                sheet.addCell(sc1);
                
                Label sc2 = new Label(6, 4, "Ye: " + String.valueOf(this._inizYellowCows));
                sheet.addCell(sc2);
                
                Label sc3 = new Label(7, 4, "Br: " + String.valueOf(this._inizBrownCows));
                sheet.addCell(sc3);
                
                Label sc4 = new Label(8, 4, "Bl: " + String.valueOf(this._inizBlueCows));
                sheet.addCell(sc4);
                
                Label sc5 = new Label(9, 4, "Re: " + String.valueOf(this._inizRedCows));
                sheet.addCell(sc5);
                
                Label s1 = new Label(3, 5, "Initial Investing Gold: " + String.valueOf(this._inizInvestingGold));
                sheet.addCell(s1);                              
                
                Label s2 = new Label(8, 5, "Initial Withdrawal Gold: " + String.valueOf(this._inizWithdrawalGold));
                sheet.addCell(s2);
                
                Label s3 = new Label(3, 6, "Gold To Exchange: " + String.valueOf(this.goldToExchange));
                sheet.addCell(s3);               
                                
                if (jCheckBox1.isSelected()) {
                    Label s4 = new Label(8, 6, "Auto Exchange Enabled: Yes");
                    sheet.addCell(s4);
                    
                    Label s5 = new Label(3, 7, "Interval Auto Exchange (Hours): " + String.valueOf(this.intervalOfHoursAutoExchange));
                    sheet.addCell(s5); 
                    
                    Label s6 = new Label(8, 7, "Max Amount to Exchange: " + String.valueOf(this.maxAmountToExchange));
                    sheet.addCell(s6); 
                }
                else {
                    Label s4 = new Label(8, 6, "Auto Exchange Enabled: No");
                    sheet.addCell(s4);
                }
                
                Label s7 = new Label(3, 8, "Initial Investment (mBTC): " + String.valueOf(this.mBtcInvested));
                sheet.addCell(s7);
                
                if (jCheckBox2.isSelected()) {
                    Label s8 = new Label(8, 8, "First Investment: Yes");
                    sheet.addCell(s8);
                }
                else {
                    Label s8 = new Label(8, 8, "First Investment: No");
                    sheet.addCell(s8);
                }
                
                if (jCheckBox3.isSelected()) {
                    Label s9 = new Label(3, 9, "Daily Bonus Calculation Enabled: Yes");
                    sheet.addCell(s9);
                    
                    if (jRadioButton5.isSelected()) {
                        Label s10 = new Label(8, 9, "Model Selected: Random Value");
                        sheet.addCell(s10);
                    }
                    else {
                        Label s10 = new Label(8, 9, "Model Selected: Fixed Value");
                        sheet.addCell(s10);
                    }
                    
                }
                else {
                    Label s9 = new Label(3, 9, "Daily Bonus Calculation Enabled: No");
                    sheet.addCell(s9);
                }
                
                if (jCheckBox4.isSelected()) {
                    Label s11 = new Label(3, 10, "Daily Gambling Calculation Enabled: Yes");
                    sheet.addCell(s11);
                    
                    Label s12 = new Label(8, 10, "Max Daily Gambling Value: " + String.valueOf(this.dailyGamblingBonus));
                    sheet.addCell(s12);
                }
                else {
                    Label s11 = new Label(3, 10, "Daily Gambling Calculation Enabled: No");
                    sheet.addCell(s11);
                }
                
                if (jCheckBox6.isSelected()) {
                    Label s13 = new Label(3, 11, "Shopping Plan Enabled: Yes");
                    sheet.addCell(s13);
                    
                    Label s14 = new Label(8, 11, "Shopping Plan Frequency (Hours): " + String.valueOf(this.shoppingFrequency));
                    sheet.addCell(s14);
                    
                    Label s15 = new Label(3, 12, "Cows To Buy:");
                    sheet.addCell(s15);

                    Label s16 = new Label(5, 12, "Gr: " + this._inizGreenCowsToBuy);
                    sheet.addCell(s16);

                    Label s17 = new Label(6, 12, "Ye: " + this._inizYellowCowsToBuy);
                    sheet.addCell(s17);

                    Label s18 = new Label(7, 12, "Br: " + this._inizBrownCowsToBuy);
                    sheet.addCell(s18);

                    Label s19 = new Label(8, 12, "Bl: " + this._inizBlueCowsToBuy);
                    sheet.addCell(s19);

                    Label s20 = new Label(9, 12, "Re: " + this._inizRedCowsToBuy);
                    sheet.addCell(s20);
                }
                else {
                    Label s13 = new Label(3, 11, "Shopping Plan Enabled: No");
                    sheet.addCell(s13);
                }
                
                Label s21 = new Label(3, 14, "Output Time Interval (Hours): " + this.outputTimeInterval);
                sheet.addCell(s21);
                
                Label s22 = new Label(8, 14, "Amount Of Intervals: " + this.amountOfIntervals);
                sheet.addCell(s22);
                
                Label s23 = new Label(0, 16, "Produced By Cows:");
                sheet.addCell(s23);
                
                Label s24 = new Label(3, 16, "Investing Gold: " + this.totalInvestingGold);
                sheet.addCell(s24);
                
                Label s25 = new Label(8, 16, "Withdrawal Gold: " + this.totalWithdrawalGold);
                sheet.addCell(s25);
                //
                Label l1 = new Label(1, 18, "Invest. Gold");
                sheet.addCell(l1);
                
                Label l2 = new Label(2, 18, "With. Gold");
                sheet.addCell(l2);
                
                Label l3 = new Label(4, 18, "Gr Cows");
                sheet.addCell(l3);
                
                Label l4 = new Label(5, 18, "Ye Cows");
                sheet.addCell(l4);
                
                Label l5 = new Label(6, 18, "Br Cows");
                sheet.addCell(l5);
                
                Label l6 = new Label(7, 18, "Bl Cows");
                sheet.addCell(l6);
                
                Label l7 = new Label(8, 18, "Re Cows");
                sheet.addCell(l7);
                
                Label l8 = new Label(10, 18, "Gold Produced by Cows during Interval");
                sheet.addCell(l8);
                
                if (i%this.outputTimeInterval == 0) {                  

                    vInvestingGold[rowIndex] = this.investingGold;
                    vInvestingGold[rowIndex] = this.convertFloatToRightPrecisionFloat(vInvestingGold[rowIndex]);
                    
                    vWithdrawalGold[rowIndex] = this.withdrawalGold;
                    vWithdrawalGold[rowIndex] = this.convertFloatToRightPrecisionFloat(vWithdrawalGold[rowIndex]);
                    
                    vGreenCows[rowIndex] = this.greenCows;
                    vYellowCows[rowIndex] = this.yellowCows;
                    vBrownCows[rowIndex] = this.brownCows;
                    vBlueCows[rowIndex] = this.blueCows;
                    vRedCows[rowIndex] = this.redCows;
                    
                    
                    vIntervalGoldProduced[rowIndex] = this.setIntervalGoldProducedByCows(this.greenCows, this.yellowCows, this.brownCows, this.blueCows, this.redCows);
                    
                    rowIndex ++;
                    /*
                    r[0][rowIndex] = new Label(1, 17 + sheetRows, String.valueOf(this.investingGold));
                    sheet.addCell(r[0][rowIndex]);

                    r[1][rowIndex] = new Label(3, 17 + sheetRows, String.valueOf(this.withdrawalGold));
                    sheet.addCell(r[1][rowIndex]);

                    r[2][rowIndex] = new Label(5, 17 + sheetRows, String.valueOf(this.greenCows));
                    sheet.addCell(r[2][rowIndex]);

                    r[3][rowIndex] = new Label(6, 17 + sheetRows, String.valueOf(this.yellowCows));
                    sheet.addCell(r[3][rowIndex]);

                    r[4][rowIndex] = new Label(7, 17 + sheetRows, String.valueOf(this.brownCows));
                    sheet.addCell(r[4][rowIndex]);

                    r[5][rowIndex] = new Label(8, 17 + sheetRows, String.valueOf(this.blueCows));
                    sheet.addCell(r[5][rowIndex]);

                    r[6][rowIndex] = new Label(9, 17 + sheetRows, String.valueOf(this.redCows));
                    sheet.addCell(r[6][rowIndex]);
                    
                    */
                }
                
                if (i == this.outputTimeInterval * this.amountOfIntervals) {
                    
                    int k = 0;
                    for (int j = 1; j <= this.amountOfIntervals; j++) {
                        r[0][k] = new Label(1, 18 + j, String.valueOf(vInvestingGold[k]));
                        sheet.addCell(r[0][k]);

                        r[1][k] = new Label(2, 18 + j, String.valueOf(vWithdrawalGold[k]));
                        sheet.addCell(r[1][k]);

                        r[2][k] = new Label(4, 18 + j, String.valueOf(vGreenCows[k]));
                        sheet.addCell(r[2][k]);

                        r[3][k] = new Label(5, 18 + j, String.valueOf(vYellowCows[k]));
                        sheet.addCell(r[3][k]);

                        r[4][k] = new Label(6, 18 + j, String.valueOf(vBrownCows[k]));
                        sheet.addCell(r[4][k]);

                        r[5][k] = new Label(7, 18 + j, String.valueOf(vBlueCows[k]));
                        sheet.addCell(r[5][k]);

                        r[6][k] = new Label(8, 18 + j, String.valueOf(vRedCows[k]));
                        sheet.addCell(r[6][k]);
                        
                        r[7][k] = new Label(10, 18 + j, String.valueOf(vIntervalGoldProduced[k]));
                        sheet.addCell(r[7][k]);
                        
                        k ++;
                    }
                    
                    workbook.write(); 
                    workbook.close();
                }
            }
            catch (IOException IOE) {
                JOptionPane.showMessageDialog(rootPane, "Error: can't find 'Output.xls' file\nIf you have the file open\n please close the application and the file.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
            catch (WriteException ex) {
                JOptionPane.showMessageDialog(rootPane, "Error: can't write in 'Output.xls' file", "Error!", JOptionPane.ERROR_MESSAGE);
            }            
        }        
        JOptionPane.showMessageDialog(rootPane, "All data are sucesfully!\nPress 'Show File Sheet' to view results.", "Success!", JOptionPane.INFORMATION_MESSAGE);
    }    
        
    private float convertFloatToRightPrecisionFloat (float f) {
        return Float.parseFloat(String.format("%.2f", f));
    }
    
    private float setIntervalGoldProducedByCows (int gr, int ye, int br, int bl, int re) {
        float g = 0;
        
        g = (float) (g + (0.07 * gr));
        g = (float) (g + (0.7 * ye));
        g = (float) (g + (3.7 * br));
        g = (float) (g + (19.2 * bl));
        g = (float) (g + (96.5 * re));
        
        g = g * this.outputTimeInterval;
        g = this.convertFloatToRightPrecisionFloat(g);
        
        return g;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
